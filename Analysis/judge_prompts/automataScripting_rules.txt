Your primary role is to evaluate a JSON-based behavior script for a cellular automata simulation. You will assess how well this script logically implements a natural language description of an element's behavior using a specific set of node-based rules.

This prompt provides all the information you need in a structured format. First, you will be presented with the **Task Rules**, which detail the available node types and the required JSON structure (`name`, `color_hex`, `behavior`). Following these rules, you will find the **Evaluation Rubric** to guide your scoring and the required **Output Schema** for your own response.

Finally, you will see the full task, which includes the original **User Input** (the behavioral concept), the **Context** (existing elements in the simulation), the **Response to Evaluate** (the generated JSON script), and an **Algorithmic Validation** pre-check result.

Please begin by carefully reviewing the Task Rules below.

--- Available Node Types (for the `actions` array inside the `behavior` struct) ---

**I. Wrapper / Modifier Nodes (These contain other nodes):**
* `{ "type": "in_rand_rotation", "actions": [ ... ] }`: Executes nested actions in one random of 8 directions.
* `{ "type": "in_rand_mirror", "actions": [ ... ] }`: 50% chance to mirror nested actions across the vertical axis (east becomes west, etc.).
* `{ "type": "in_rand_flip", "actions": [ ... ] }`: 50% chance to flip nested actions across the horizontal axis (north becomes south, etc.).

**II. Conditional Nodes (These check a condition and then run nested actions):**
* `{ "type": "if_neighbor_is", "direction": "...", "options": ["type1", "type2"], "actions": [ ... ], "else_actions": [ ... ] }`: Checks if a neighbor is one of the types in `options`.
* `{ "type": "if_neighbor_is_not", "direction": "...", "options": ["type1"], "actions": [ ... ] }`: The inverse of the above.
* `{ "type": "if_alpha", "target": "self|direction", "comparison": "...", "is": number, "actions": [ ... ] }`: Checks a cell's alpha value. `comparison` options: `"less_than"`, `"greater_than"`, `"equal_to"`, `"not_equal_to"`.
* `{ "type": "if_neighbor_count", "direction_set": ["dir1", ...], "options": ["type1"], "comparison": "...", "count": number, "actions": [ ... ] }`: Counts neighbors of a certain type in the given directions and compares the total.
* `{ "type": "if_chance", "percent": number (0-100), "actions": [ ... ] }`: Succeeds based on a percentage chance.

**III. Executor / Action Nodes (These perform an action and are usually the innermost nodes):**
* `{ "type": "do_swap", "direction": "...", "actions": [ ... ] (optional) }`: Swaps position with a neighbor, then can immediately run a nested `actions` list from the cell's new location. This entire operation ends the cell's turn.
* `{ "type": "do_set_type", "target": "self|direction", "to": "new_type" }`: Changes a cell's type.
* `{ "type": "do_set_alpha", "target": "self|direction", "operation": "...", "to": number }`: Modifies a cell's alpha value. `operation` options: `"set"`, `"add"`, `"subtract"`.
* `{ "type": "do_spawn", "direction": "...", "into_options": ["air"], "set_type": "...", "set_alpha": number (optional) }`: Creates a new particle in an adjacent cell if it's a valid type.
* `{ "type": "do_copy_alpha", "source_direction": "...", "dest_direction": "..." }`: Copies the alpha value from one cell to another.